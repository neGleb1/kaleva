
-- docker run --detach --name db --volume ./db:/docker-entrypoint-initdb.d --env POSTGRES_USER=admin --env POSTGRES_PASSWORD=87654321 --env POSTGRES_DB=todo -p 127.0.0.1:5435:5432 postgres:17-alpine


CREATE TABLE IF NOT EXISTS user (
  user_id SERIAL PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  created TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS category (
  category_id SERIAL PRIMARY KEY,
  category_name VARCHAR(255) NOT NULL,
  created TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(owner_id) REFERENCES channel_owner(owner_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS channel_owner (
  owner_id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL,
  created TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(user_id) REFERENCES user(user_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS channel (
  channel_id SERIAL PRIMARY KEY,
  owner_id INTEGER NOT NULL,
  category_id INTEGER NOT NULL,
  channel_name VARCHAR(255) NOT NULL,
  created TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(owner_id) REFERENCES channel_owner(owner_id) ON DELETE CASCADE,
  FOREIGN KEY(category_id) REFERENCES category(category_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS video (
  video_id SERIAL PRIMARY KEY,
  channel_id INTEGER NOT NULL,
  video_name VARCHAR(255) NOT NULL,
  created TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(owner_id) REFERENCES channel_owner(owner_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS customer (
  customer_id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL,
  created TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(user_id) REFERENCES user(user_id) ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON user
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON channel
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON customer
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();
